@page "/Retailers/Create"

@using Microsoft.AspNetCore.Mvc.ModelBinding
@using SimpleDataManagementSystem.Frontend.Web.Razor.Pages.ViewComponents

@model SimpleDataManagementSystem.Frontend.Web.Razor.Pages.Retailers.CreateRetailerModel

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<CreateRetailerModel> loc

@{
    ViewData["Title"] = loc["Create new retailer"];
}

<div class="header">
    <h1>@loc["Create new retailer"]</h1>
</div>

    
<br>


<div class="content-container">

    <!-- #region DisplayError -->
    @await Component.InvokeAsync(typeof(DisplayErrorViewComponent), Model?.Error)
    <!-- #endregion DisplayError -->

    <!-- #region ModelStateValidationErrors -->
    @await Component.InvokeAsync(typeof(InvalidModelStateViewComponent), ModelState)
    <!-- #endregion ModelStateValidationErrors -->

    <br>

    <form method="post" enctype="multipart/form-data">
        <div class="form-controls-container">
            <div class="form-controls">
                <div class="port-side">
                    <div class="input-control">
                        <div class="required">
                            <label>@loc["Name"]:</label>
                        </div>
                        <div>
                            <input type="text" name="name" value="@Model?.Model?.Name" />
                        </div>
                    </div>

                    <br>

                    <div class="input-control">
                        <div class="required">
                            <label>@loc["Priority"]:</label>
                        </div>
                        <div>
                            <input type="number" name="priority" value="@Model?.Model?.Priority" />
                        </div>
                    </div>
                </div>

                <div class="starboard-side">
                    <div class="image-control">
                        <div>
                            <label>@loc["Thumbnail"]:</label>
                        </div>
                        <div id="thumbnail">
                            <div style="position: relative">
                                <div class="thumbnail-preview-container">
                                    <img height="300"
                                         width="300"
                                         id="thumbnailPreview"
                                         src="@(Model?.Model?.LogoImage == null ? "/Resources/image_not_available.png" : Model.Model.LogoImage)" />
                                </div>

                                <div class="thumbnail-preview-delete-control element-invisible-no-space"
                                     style="position:absolute; top:5px; right: 5px;">
                                    <button type="button" style="border:none;
                                                cursor:default;
                                                background-color: transparent;
                                                background-repeat: no-repeat;
                                                border: none;
                                                overflow: hidden;
                                                outline: none;">
                                        <i onclick="removePreview(event)" style="cursor: pointer;" class="fa-solid fa-circle-xmark fa-lg">
                                        </i>
                                    </button>
                                </div>
                            </div>

                            <div class="thumbnail-upload-control">
                                <div>
                                    <label id="thumbnailAddOrUpdate">@loc["Add new thumbnail"]:</label>
                                </div>
                                <div>
                                    <input id="thumbnailUpload" value="@Model?.Model?.LogoImage" type="file" name="logoImage" onchange="loadThumbnailPreview(event)" />
                                </div>
                            </div>
                        </div>

                        <br />

                    </div>
                </div>

            </div>

            <br>

            <div class="flex-justify-center">
                <button class="button-default" type="submit">
                    @loc["Create"]
                </button>
            </div>
        </div>
    </form>
</div>


@section scripts {

    <script>
        function removePreview(event) {
            var img = document.getElementById('thumbnailPreview');
            img.removeAttribute('src');
            img.src = "/Resources/image_not_available.png";

            var input = document.getElementById('thumbnailUpload').value = "";

            // TODO toggle this control (function)
            var thumbnailUploadControl = document.getElementsByClassName('thumbnail-upload-control')[0];
            thumbnailUploadControl.classList.remove('element-invisible-no-space');

            // TODO toggle this control (function)
            var thumbnailPreviewDeleteControl = document.getElementsByClassName('thumbnail-preview-delete-control')[0];
            thumbnailPreviewDeleteControl.classList.add('element-invisible-no-space');
        }
    </script>

    <script>
        var loadThumbnailPreview = function (event) {
            // TODO toggle this control (function)
            var thumbnailUploadControl = document.getElementsByClassName('thumbnail-upload-control')[0];
            thumbnailUploadControl.classList.add('element-invisible-no-space');

            // TODO toggle this control (function)
            var thumbnailPreviewDeleteControl = document.getElementsByClassName('thumbnail-preview-delete-control')[0];
            thumbnailPreviewDeleteControl.classList.remove('element-invisible-no-space');

            var output = document.getElementById('thumbnailPreview');
            output.src = URL.createObjectURL(event.target.files[0]);
            output.onload = function () {
                URL.revokeObjectURL(output.src) // free memory
            }
        };
    </script>

}